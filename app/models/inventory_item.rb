class InventoryItem < ApplicationRecord
  include ForeignLinks
  include CommentsCleanup
  include ComposedOfReimplementation
  resourcify

  # class variables for storing the user name and the event from the controller
  @last_user_save
  attr_accessor :last_user_save
  @last_event_save
  attr_accessor :last_event_save
  
  has_paper_trail :on => [:update, :destroy], :only => [:marc_source], :if => Proc.new { |t| VersionChecker.save_version?(t) }

  has_many :digital_object_links, :as => :object_link, :dependent => :delete_all
  has_many :digital_objects, through: :digital_object_links, foreign_key: "object_link_id"

  #has_and_belongs_to_many :institutions, join_table: "holdings_to_institutions"
  has_many :inventory_item_institution_relations
  has_many :institutions, through: :inventory_item_institution_relations

  #has_and_belongs_to_many :people, join_table: "holdings_to_people"
  has_many :inventory_item_person_relations
  has_many :people, through: :inventory_item_person_relations

  #has_and_belongs_to_many :publications, join_table: "holdings_to_publications"
  has_many :inventory_item_publication_relations
  has_many :publications, through: :inventory_item_publication_relations

  #has_and_belongs_to_many :places, join_table: "holdings_to_places"
  has_many :inventory_item_source_relations
  has_many :sources, through: :inventory_item_source_relations

  #has_and_belongs_to_many :standard_titles, join_table: "inventory_items_to_standard_titles"
  has_many :inventory_item_standard_title_relations
  has_many :standard_titles, through: :inventory_item_standard_title_relations

  #has_and_belongs_to_many :standard_terms, join_table: "inventory_items_to_standard_terms"
  has_many :inventory_item_standard_term_relations
  has_many :standard_terms, through: :inventory_item_standard_term_relations

  has_many :inventory_item_holding_relations
  has_many :holdings, through: :inventory_item_holding_relations

  has_many :inventory_item_work_relations
  has_many :works, through: :inventory_item_work_relations

  belongs_to :source
  has_many :folder_items, as: :item, dependent: :destroy
  has_many :delayed_jobs, -> { where parent_type: "InventoryItem" }, class_name: 'Delayed::Backend::ActiveRecord::Job', foreign_key: "parent_id"
  belongs_to :user, :foreign_key => "wf_owner"
  
  # Inventory items pointing to IIs
  has_many :inventory_item_relations, foreign_key: "inventory_item_a_id"
  has_many :inventory_items, through: :inventory_item_relations, source: :inventory_item_b
  # And this is the one coming back, i.e. inventory_item pointing to this one from 775
  has_many :referring_inventory_item_relations, class_name: "InventoryItemRelation", foreign_key: "inventory_item_b_id"
  has_many :referring_inventory_items, through: :referring_inventory_item_relations, source: :inventory_item_a

  composed_of_reimplementation :marc, :class_name => "MarcInventoryItem", :mapping => %w(marc_source to_marc)

  before_save :set_object_fields
  after_create :scaffold_marc, :fix_ids
  after_save :update_links, :reindex
  after_initialize :after_initialize
  before_destroy :update_links, :cleanup_comments
  
  
  attr_accessor :suppress_reindex_trigger
  attr_accessor :suppress_scaffold_marc_trigger
  attr_accessor :suppress_recreate_trigger
  attr_accessor :suppress_update_count_trigger
  attr_accessor :suppress_update_77x_trigger

  # Keep both inprogress and unpublished for compatibility with older versions
  enum :wf_stage, { unpublished: 0, inprogress: 0, published: 1, deleted: 2, deprecated: 3 }
  enum :wf_audit, [ :unapproved, :full, :abbreviated, :retro, :imported ]

  def after_initialize
    @last_user_save = nil
    @last_event_save = "update"
  end

  # Suppresses the solr reindex
  def suppress_reindex
    self.suppress_reindex_trigger = true
  end

  def suppress_scaffold_marc
    self.suppress_scaffold_marc_trigger = true
  end
  
  def suppress_recreate
    self.suppress_recreate_trigger = true
  end 
  
  def suppress_update_count
    self.suppress_update_count_trigger = true
  end
  
  def suppress_update_77x
    self.suppress_update_77x_trigger = true
  end

  def fix_ids
    #generate_new_id
    # If there is no marc, do not add the id
    return if marc_source == nil

    # The ID should always be sync'ed if it was not generated by the DB
    # If it was scaffolded it is already here
    # If we imported a MARC record into Person, it is already here
    # THis is basically only for when we have a new item from the editor
    marc_source_id = marc.get_marc_source_id
    if !marc_source_id or marc_source_id == "__TEMP__"

      self.marc.set_id self.id
      self.marc_source = self.marc.to_marc
      PaperTrail.request(enabled: false) do
        save
      end
    end
  end
  
  def update_links
    return if self.suppress_recreate_trigger == true
    
    allowed_relations = ["sources", "holdings", "works", "institutions", "publications", "people", "places", "standard_titles", "standard_terms", "inventory_items"]
    recreate_links(marc, allowed_relations)
  end
  
  
  def scaffold_marc
    return if self.marc_source != nil  
    return if self.suppress_scaffold_marc_trigger == true
 
    new_marc = MarcInventoryItem.new(File.read(ConfigFilePath.get_marc_editor_profile_path("#{Rails.root}/config/marc/#{RISM::MARC}/inventory_item/default.marc")))
    new_marc.load_source true
    
    if self.id != nil
      new_marc.set_id self.id
    end
    
    self.marc_source = new_marc.to_marc
    self.save!
  end


  def set_object_fields
    # This is called always after we tried to add MARC
    # if it was suppressed we do not update it as it
    # will be nil
    return if marc_source == nil
    
    # If the source id is present in the MARC field, set it into the
    # db record
    # if the record is NEW this has to be done after the record is created
    marc_source_id = marc.get_marc_source_id
    # If 001 is empty or new (__TEMP__) let the DB generate an id for us
    # this is done in create(), and we can read it from after_create callback
    self.id = marc_source_id if marc_source_id and marc_source_id != "__TEMP__"
    
    self.composer = marc.get_composer
    self.title = marc.get_source_title

    self.marc_source = self.marc.to_marc
  end
  

  def reindex
    return if self.suppress_reindex_trigger == true
    self.index
  end


  searchable :auto_index => false do |sunspot_dsl|
    sunspot_dsl.integer :id
    sunspot_dsl.integer :source_id

    sunspot_dsl.text :title
    sunspot_dsl.text :composer

    sunspot_dsl.string :title_order do |s|
      s.title
    end

    sunspot_dsl.string :composer_order do |s|
      s.composer
    end

    sunspot_dsl.string :inventory_title_order do |s|
      s.source.title
    end
    
    sunspot_dsl.join(:folder_id, :target => FolderItem, :type => :integer, 
              :join => { :from => :item_id, :to => :id })
        

    sunspot_dsl.integer :wf_owner
    sunspot_dsl.time :created_at
    sunspot_dsl.time :updated_at
    
    sunspot_dsl.text :text do |s|
      s.marc.to_raw_text
    end

    MarcIndex::attach_marc_index(sunspot_dsl, self.to_s.underscore.downcase)
    
  end

  def display_name
    title
  end

  def get_shelfmark
    self.marc.get_shelf_mark
  end

  def formatted_title
    return title
  end

  def autocomplete_label
    title = self.title.truncate(30) rescue title = "n.a."
    "#{self.id}: #{self.composer} - #{title}"
  end

  # If we define our own ransacker, we need this
  def self.ransackable_attributes(auth_object = nil)
    column_names + _ransackers.keys
  end

  def self.ransackable_associations(auth_object = nil)
    reflect_on_all_associations.map { |a| a.name.to_s }
  end

  def creatable?
    false
  end

  ransacker :"786i", proc{ |v| } do |parent| parent.table[:id] end

end
